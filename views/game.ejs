<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Game</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link rel="stylesheet" href="/css/mobile.css">
    <style>
        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, minmax(0, 1fr));
            grid-template-rows: repeat(8, minmax(0, 1fr));
            width: 100%;
            max-width: 600px;
            height: auto;
            aspect-ratio: 1;
            transform: rotate(0deg);
        }   
        .piece.white {
            color: white;
            filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
        }
        .piece.black {
            color: black;
        }
        .flipped {
            transform: rotate(180deg);
        }
        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        .square.light {
            background-color: #f0d9b5;
        }
        .square.dark {
            background-color: #b58863;
        }
        .piece {
            font-size: clamp(24px, 8vw, 54px);
            cursor: pointer;
            user-select: none;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }
        .piece.draggable {
            cursor: grab;
        }
        .piece.draggable:active {
            cursor: grabbing;
        }
        .dragging {
            opacity: 0.5;
        }
        .flipped .piece {
            transform: rotate(180deg);
        }
        .selected {
            background-color: rgba(255, 255, 0, 0.5) !important;
        }
        .valid-move {
            position: relative;
        }
        .valid-move::after {
            content: '';
            position: absolute;
            width: 25%;
            height: 25%;
            background-color: rgba(0, 255, 0, 0.5);
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        .status-message {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            padding: 6px 10px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 12px;
            animation: fadeInOut 3s ease-in-out;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            max-width: 90vw;
            text-align: center;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateX(-50%) translateY(-10px); }
            10% { opacity: 1; transform: translateX(-50%) translateY(0); }
            90% { opacity: 1; transform: translateX(-50%) translateY(0); }
            100% { opacity: 0; transform: translateX(-50%) translateY(-10px); }
        }
        .back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
        }
        .back-button button {
            font-size: 14px;
            padding: 8px 12px;
        }
        /* THEME STYLES */
        .theme-default {
            background-image: url('/assets/historic.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        .theme-scifi {
            background-image: url('/assets/sci-fi.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        .theme-matrix {
            background-image: url('/assets/matrix.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        .theme-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1001;
            background: #222;
            color: #fff;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            cursor: pointer;
            transition: background 0.2s;
        }
        .theme-btn:hover {
            background: #444;
        }
        .theme-dropdown {
            position: fixed;
            top: 70px;
            right: 20px;
            z-index: 1002;
            background: #222;
            color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            padding: 0.5rem 0;
            min-width: 120px;
            display: none;
        }
        .theme-dropdown.active {
            display: block;
        }
        .theme-dropdown button {
            background: none;
            border: none;
            color: #fff;
            width: 100%;
            text-align: left;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            cursor: pointer;
            transition: background 0.2s;
        }
        .theme-dropdown button:hover {
            background: #333;
        }
        
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .back-button {
                top: 10px;
                left: 10px;
            }
            .theme-btn {
                top: 10px;
                right: 10px;
                width: 36px;
                height: 36px;
                font-size: 1rem;
            }
            .theme-dropdown {
                top: 55px;
                right: 10px;
            }
            .status-message { top: 10px; }
        }
        
        /* Touch-friendly interactions */
        @media (hover: none) and (pointer: coarse) {
            .piece {
                cursor: default;
            }
            .piece.draggable {
                cursor: default;
            }
        }
        
        /* Prevent zoom on double tap */
        @media (max-width: 768px) {
            * {
                touch-action: manipulation;
            }
        }
        
        /* Better mobile layout */
        @media (max-width: 480px) {
            .chessboard {
                max-width: 100vw;
                margin: 0 auto;
            }
            
            .back-button {
                top: 5px;
                left: 5px;
            }
            
            .theme-btn {
                top: 5px;
                right: 5px;
            }
            
            .status-message {
                top: 5px;
                left: 5px;
                right: 5px;
                transform: none;
                max-width: none;
            }
        }
    </style>
</head>

<body>
    <div class="back-button">
        <button onclick="goBack()" class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded-lg transition-colors text-sm">
            ‚Üê Back
        </button>
    </div>
    <!-- THEME BUTTON -->
    <button class="theme-btn" id="themeBtn" title="Change Theme">
        <span>üé®</span>
    </button>
    <div class="theme-dropdown" id="themeDropdown">
        <button onclick="setTheme('Default')">Old School</button>
        <button onclick="setTheme('scifi')">Sci-Fi</button>
        <button onclick="setTheme('matrix')">Matrix</button>
    </div>
    <div id="mainBg" class="w-full min-h-screen flex items-center justify-center bg-zinc-900 theme-default p-4">
        <div class="text-center w-full max-w-2xl">
            <div id="statusMessage" class="status-message hidden"></div>
            <div id="inviteBar" class="hidden mb-3 flex items-center justify-between bg-gray-800/80 text-white px-3 py-2 rounded">
                <span id="inviteText" class="text-sm truncate"></span>
                <button id="copyInvite" class="ml-2 bg-gray-700 hover:bg-gray-600 text-white text-xs px-2 py-1 rounded">Copy</button>
            </div>
            <div id="inviteActions" class="hidden mb-3 flex items-center justify-center gap-2">
                <button id="acceptInvite" class="bg-green-600 hover:bg-green-700 text-white text-sm px-3 py-1 rounded">Accept Invite</button>
                <button id="declineInvite" class="bg-gray-600 hover:bg-gray-700 text-white text-sm px-3 py-1 rounded">Decline</button>
            </div>
            <div id="gameContainer" class="hidden">
                <div class="chessboard mx-auto bg-red-800 rounded-lg shadow-lg"></div>
            </div>
            <div id="waitingMessage" class="hidden">
                <div class="text-center">
                    <div class="text-4xl md:text-6xl mb-4">‚è≥</div>
                    <h2 class="text-2xl md:text-3xl font-bold text-white mb-4">Waiting for Opponent</h2>
                    <p class="text-lg md:text-xl text-gray-300 px-4">Please wait for another player to join the game...</p>
                </div>
            </div>
            <div id="noGameMessage" class="hidden">
                <div class="text-center">
                    <div class="text-4xl md:text-6xl mb-4">üèÅ</div>
                    <h2 class="text-2xl md:text-3xl font-bold text-white mb-4">No Active Games</h2>
                    <p class="text-lg md:text-xl text-gray-300 px-4">The room no longer exists</p>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"
        integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/js/chessgame.js"></script>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const role = urlParams.get('role');
        const roomId = urlParams.get('roomId');
        function goBack() {
            window.location.href = '/';
        }
        // THEME SWITCHER
        const themeBtn = document.getElementById('themeBtn');
        const themeDropdown = document.getElementById('themeDropdown');
        const mainBg = document.getElementById('mainBg');
        let currentTheme = sessionStorage.getItem('chessTheme') || 'default';
        function setTheme(theme) {
            mainBg.classList.remove('theme-default', 'theme-scifi', 'theme-matrix');
            if (theme === 'Default') mainBg.classList.add('theme-default');
            if (theme === 'scifi') mainBg.classList.add('theme-scifi');
            if (theme === 'matrix') mainBg.classList.add('theme-matrix');
            currentTheme = theme.toLowerCase();
            sessionStorage.setItem('chessTheme', currentTheme);
            themeDropdown.classList.remove('active');
        }
        themeBtn.onclick = () => {
            themeDropdown.classList.toggle('active');
        };
        document.addEventListener('click', (e) => {
            if (!themeBtn.contains(e.target) && !themeDropdown.contains(e.target)) {
                themeDropdown.classList.remove('active');
            }
        });
        setTheme(currentTheme);
        // END THEME SWITCHER
        function showStatusMessage(message, type = 'info') {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.textContent = message;
            statusDiv.className = `status-message ${type === 'error' ? 'bg-red-500' : 'bg-gray-500'} text-white`;
            statusDiv.classList.remove('hidden');
            setTimeout(() => {
                statusDiv.classList.add('hidden');
            }, 2500);
        }
        function showWaitingMessage() {
            document.getElementById('gameContainer').classList.add('hidden');
            document.getElementById('noGameMessage').classList.add('hidden');
            document.getElementById('waitingMessage').classList.remove('hidden');
        }
        function showNoGameMessage() {
            document.getElementById('gameContainer').classList.add('hidden');
            document.getElementById('waitingMessage').classList.add('hidden');
            document.getElementById('noGameMessage').classList.remove('hidden');
        }
        function showGame() {
            document.getElementById('waitingMessage').classList.add('hidden');
            document.getElementById('noGameMessage').classList.add('hidden');
            document.getElementById('gameContainer').classList.remove('hidden');
        }
        // Invite helpers
        function showInviteLink(id) {
            const bar = document.getElementById('inviteBar');
            const text = document.getElementById('inviteText');
            const btn = document.getElementById('copyInvite');
            const link = `${location.origin}/game?role=player&roomId=${id}`;
            text.textContent = link;
            bar.classList.remove('hidden');
            btn.onclick = async () => {
                try {
                    await navigator.clipboard.writeText(link);
                    showStatusMessage('Copied invite link', 'info');
                    // Hide the bar after copying
                    bar.classList.add('hidden');
                } catch {}
            };
        }

        function showInviteActions(id) {
            const actions = document.getElementById('inviteActions');
            actions.classList.remove('hidden');
            document.getElementById('acceptInvite').onclick = () => {
                socket.emit('joinRoom', { roomId: id, as: 'player' });
                actions.classList.add('hidden');
            };
            document.getElementById('declineInvite').onclick = () => {
                window.location.href = '/';
            };
        }

        // Make functions globally available
        window.showStatusMessage = showStatusMessage;
        window.showWaitingMessage = showWaitingMessage;
        window.showNoGameMessage = showNoGameMessage;
        window.showGame = showGame;
        // Initialize based on role
        // Room-based flow
        if (role === 'host') {
            showGame();
            socket.emit('joinRoom', { roomId, as: 'host' });
            // If no roomId (legacy deep-link), server will create and reply
        } else if (role === 'player' && roomId) {
            showGame();
            socket.emit('joinRoom', { roomId, as: 'player' });
        } else if (role === 'player' && !roomId) {
            showWaitingMessage();
            showStatusMessage('Finding random opponent...', 'info');
            // Reuse old behavior by joining a shared room-less queue using host-less mode
            socket.emit('joinRoom', { roomId: 'random', as: 'player' });
        } else if (role === 'spectator') {
            showStatusMessage('Joining as spectator...', 'info');
            socket.emit('joinRoom', { roomId, as: 'spectator' });
        }

        // Server responses
        socket.on('joinedRoom', ({ roomId }) => {
            if (role === 'host') {
                history.replaceState({}, '', `/game?role=host&roomId=${roomId}`);
                showInviteLink(roomId);
            }
            if (role === 'player' && roomId && !new URLSearchParams(location.search).get('roomId')) {
                // Random match assigned a room; update URL
                history.replaceState({}, '', `/game?role=player&roomId=${roomId}`);
            }
            if (role !== 'host' && role !== 'player' && roomId) {
                // If a spectator came via invite, allow accepting
                showInviteActions(roomId);
            }
        });

        socket.on('roomClosed', ({ roomId }) => {
            showNoGameMessage();
            showStatusMessage('Room no longer exists', 'error');
        });
    </script>
</body>

</html>
